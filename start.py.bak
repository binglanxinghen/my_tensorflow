import datetime
from flask import Flask
from flask import render_template, redirect, url_for, request, session
from werkzeug import secure_filename
import os
from flask_paginate import Pagination,get_page_parameter
import time
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash  # 密码保护，使用hash方法
from flask_sqlalchemy import SQLAlchemy
import json
from predict import YoloTest
# import python4
yolo_mini = YoloTest()
app = Flask(__name__)
# server = Flask(__name__, static_folder='static')
basedir = os.path.abspath(os.path.dirname(__file__)) #定义一个根目录 用于保存图片用

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///students.sqlite3'
app.config['SECRET_KEY'] = "random string"

db = SQLAlchemy(app)

#user表
class User(db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    username = db.Column(db.String(20), nullable=False)
    _password = db.Column(db.String(200), nullable=False)  # 内部使用

    @property
    def password(self):  # 定义一个外部使用的密码
        return self._password

    @password.setter  # 设置密码加密
    def password(self, row_password):
        self._password = generate_password_hash(row_password)

    # 检查密码是否正确
    def check_password(self, row_password):  # 定义一个反向解密的函数
        result = check_password_hash(self._password, row_password)
        return result


#
class History(db.Model):
    __tablename__ = 'history'
    history_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    image_url = db.Column(db.String(225), nullable=False)
    result = db.Column(db.Text, nullable=False)
    time = db.Column(db.DateTime, default=datetime.now())
    # author = db.relationship('User', backref=db.backref('questions'))

db.create_all()
print ("Table created successfully")
# 将数据库查询结果传递到前端页面 Question.query.all(),问答排序
@app.route('/', methods=["POST", "GET"])
def none():
    return render_template('index.html')
@app.route('/index', methods=["POST", "GET"])
def index():
     return render_template('index.html')

# @app.route('/')
# def index():
#     page=request.args.get('page',1,type=int)
#     pagination=History.query.order_by(History.time.desc()).paginate(page,per_page=3,error_out=False)
#     users=pagination.items
#     return render_template('test.html', historys=users,pagination=pagination)

@app.route('/history')
def history():
    if not session.get('id'):
        return render_template('login.html')
    id=session['id']
    page = request.args.get('page', 1, type=int)
    pagination = History.query.filter(History.user_id == id).order_by(History.time.desc()).paginate(page, per_page=3, error_out=False)
    historys = pagination.items
    # context = {
    #     'historys':historys,
    #     "pagination":pagination
    # }
    return render_template('history.html', historys=historys, pagination=pagination)
    # return render_template('history.html',**context)

def add_history(user_id,image_url,result):
    history = History(result=result, image_url=image_url, user_id=user_id)
    db.session.add(history)
    db.session.flush()
    hid = history.history_id
    db.session.commit()
    db.session.flush()
    return hid

@app.route('/camera',methods=['GET','POST'])
def camera():
    print('camera')
    if request.method == 'POST':
        print('camera')
        f = request.files['file1']
        basepath = os.path.dirname(__file__)  # 当前文件所在路径
        fname= time.strftime("%Y%m%d%H%M%S",time.localtime(time.time()))+str(session.get('id'))+secure_filename(f.filename)
        if not session.get('id'):
            # 游客
            print('游客')
            upload_path = os.path.join(basepath, 'static/', fname)
            # 注意：没有的文件夹一定要先创建，不然会提示没
            f.save(upload_path)
            print(upload_path)
            res = forecast('static/', fname)
            return render_template('detail.html',image_url=fname,result=res,time=datetime.now(),history=None)
        dirs = 'result/' + str(session.get('id'))
        path = './static/'+dirs
        # print(path)
        if not os.path.exists(path):
            print(path)
            os.makedirs(path)
        upload_path = os.path.join(basepath, '../static/'+dirs, fname)
        # 注意：没有的文件夹一定要先创建，不然会提示没
        f.save(upload_path)
        result = forecast(path,fname)
        hid = add_history(session.get('id'), dirs+'/'+fname, result)
        # print(hid)
        return redirect(url_for('detail', history_id=hid))
    return render_template('index.html')

#上传文件
@app.route('/upload',methods=['GET','POST'])
def upload():
    print('upload')
    if request.method == 'POST':
        print('upload')
        f=request.files['file2']
        basepath = os.path.dirname(__file__)  # 当前文件所在路径
        fname = time.strftime("%Y%m%d%H%M%S", time.localtime(time.time())) + str(session.get('id')) + secure_filename(
            f.filename)
        if not session.get('id'):
            # 游客
            print('游客')
            upload_path = os.path.join(basepath, './static/', fname)
            # 注意：没有的文件夹一定要先创建，不然会提示没
            f.save(upload_path)
            print(upload_path)
            res = forecast('static/', fname)
            return render_template('detail.html', image_url=fname, result=res, time=datetime.now(), history=None)
        dirs = 'img/' + str(session.get('id'))
        path = './static/' + dirs
        if not os.path.exists(path):
            print(path)
            os.makedirs(path)
        upload_path = os.path.join(basepath, './static/' + dirs, fname)
        # 注意：没有的文件夹一定要先创建，不然会提示没
        f.save(upload_path)
        result = forecast(path,fname)
        hid = add_history(session.get('id'), dirs + '/' + fname, result)
        return redirect(url_for('detail', history_id=hid))
    return render_template('index.html')

@app.route('/detail/<history_id>')
def detail(history_id):
    if not session.get('id'):
        return render_template('login.html')
    history = History.query.filter(History.history_id == history_id).first()
    return render_template('detail.html', history = history)

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/login/',methods=['GET','POST'])
def login():
    if request.method=='GET':
        return render_template('login.html')
    else:
        username = request.form.get('username')
        password = request.form.get('password')
        # print(username)
        # print(password)
        user = User.query.filter(User.username == username).first()
        # print(user)
        if user:
            if user.check_password(password):
                session['user']=username
                session['id']=user.id
                session.permanent = True
                return redirect(url_for('index'))
            else:
                return 'user passqord error'
        else:
            return render_template('register.html')

@app.route('/logout/',methods=['GET','POST'])
def logout():
    session.clear()
    return redirect(url_for('index'))

@app.route('/register',methods=['GET','POST'])
def register():
    if request.method=='GET':
        return render_template('register.html')
    else:
        username = request.form.get('username')
        password = request.form.get('password')
        user = User.query.filter(User.username==username).first()
        if user:
            return 'username existed'
        else:
            user = User(username=username,password=password)
            db.session.add(user)
            db.session.commit()
            return redirect(url_for('login'))
@app.route("/daisy", methods=["POST", "GET"])
def daisy():
    return render_template('daisy.html')
@app.route("/dandelion", methods=["POST", "GET"])
def dadelion():
    return render_template('dandelion.html')
@app.route("/tulips", methods=["POST", "GET"])
def tulips():
    return render_template('tulips.html')
@app.route("/sunflowers", methods=["POST", "GET"])
def sunflowers():
    return render_template('sunflowers.html')

@app.route("/rose", methods=["POST", "GET"])
def rose():
    return render_template('rose.html')
@app.template_filter('datetime_format')
def _jinja2_filter_datetime_format(datetimeValue, format='%y/%m/%d %H:%M:%S'):
    """convert a datetime to a different format."""
    print(datetime)
    return datetimeValue.strftime(format)
# 修改密码
@app.route('/edit_password/', methods=['GET', 'POST'])
def edit_password():
    if request.method == 'GET':
        return render_template("edit_password.html")
    else:
        newpassword = request.form.get('password')
        user = User.query.filter(User.username == request.form.get('username')).first()
        if user:
            user.password = newpassword
            db.session.commit()
        else:
            return 'not existed'
        return redirect(url_for('index'))
def count_classes(flow_list):
    classes = {"daisy":0,"dandelion":0,"rose":0,"sunflowers":0,"tulips":0}
    sum=0;
    for item in flow_list:
        #print(item.split()[])
        if item.split()[0] in classes.keys():
            classes[item.split()[0]]= classes[item.split()[0]] + 1
            sum=sum+1;
    if(sum==0):
        s="Unkonown"
        return s;
    s=""
    for key,value in classes.items():
        if (value!=0):
            s=s+ (key+":"+str(value)+"\n")
    return s;
    # if(classes.values()!=0):
    #     print(str(classes.keys())+":"+ str(classes.values()))
    # print(classes)
    #return json.dumps(classes)
    # return "daisy: "+str(classes['daisy'])+'\n'+"dandelion: "+str(classes['dandelion'])+'\n'+"rose: "+str(classes['rose'])+'\n'+"sunflowers: "+str(classes['sunflowers'])+'\n'+"tulips: "+str(classes['tulips'])+'\n'
@app.route("/forecast", methods=["POST"])
def forecast(path,imgName):
	result_str=""
	print('imgName:',imgName) 
        # img = request.files['img_file']
        # 定义一个图片存放的位置 存放在static下面
        # path = basedir + "/static/img/"
        # 图片名称
        # imgName = img.filename
        # 图片path和名称组成图片的保存路径
        #file_path = path + imgName
        #img.save(file_path)
	if session.get('id'):
		yolo_mini.evaluate('./'+path+'/'+imgName,'./static/result/'+str(session.get('id'))+'/'+imgName)
	else:
		yolo_mini.evaluate('./'+path+imgName,'./static/'+imgName)
        #results = os.system( "python predict.py %s %s %s %s" % ("-i","./static/img/"+imgName,"-o","./static/result/"+imgName))
	with open("flow_result.txt",'r') as f:
		lines = f.readlines()
		result_str = count_classes(lines)
        # print("===============")
        # # print(results.read())
        # print("===============")
        # print(results)
        # print(img)
	return result_str



if __name__ =="__main__":
     app.run(host='0.0.0.0',port=80)
